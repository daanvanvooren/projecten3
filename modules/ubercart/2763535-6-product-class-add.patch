diff --git a/uc_product/js/content_types.js b/uc_product/js/content_types.js
new file mode 100644
index 0000000..4807d20
--- /dev/null
+++ b/uc_product/js/content_types.js
@@ -0,0 +1,23 @@
+/**
+ * @file
+ * Utility functions to display settings summaries on vertical tabs.
+ */
+
+(function ($, Drupal) {
+  Drupal.behaviors.ucProductContentTypes = {
+    attach: function attach(context) {
+      var $context = $(context);
+
+      $context.find('#edit-uc-product').drupalSetSummary(function (context) {
+        var vals = [];
+        $(context).find('input[name^="uc_product"]:checked').next('label').each(function () {
+          vals.push(Drupal.checkPlain($(this).text()));
+        });
+        if (!$(context).find('#edit-uc-product-product').is(':checked')) {
+          vals.unshift(Drupal.t('Not a product'));
+        }
+        return vals.join(', ');
+      });
+    }
+  };
+})(jQuery, Drupal);
diff --git a/uc_product/js/uc_product.js b/uc_product/js/uc_product.js
deleted file mode 100644
index ae2b9b0..0000000
--- a/uc_product/js/uc_product.js
+++ /dev/null
@@ -1,33 +0,0 @@
-/**
- * @file
- * Utility functions to display settings summaries on vertical tabs.
- */
-
-(function ($) {
-
-  'use strict';
-
-  /**
-   * Provide the summary information for the product settings vertical tabs.
-   *
-   * @type {Drupal~behavior}
-   *
-   * @prop {Drupal~behaviorAttach} attach
-   *   Attaches the behavior for the product settings summaries.
-   */
-  Drupal.behaviors.ucProductFieldsetSummaries = {
-    attach: function (context) {
-      $('details#edit-settings-uc-product', context).drupalSetSummary(function (context) {
-        var vals = [];
-        $('input:checked', context).next('label').each(function () {
-          vals.push(Drupal.checkPlain($(this).text()));
-        });
-        if ($('#edit-settings-uc-product-shippable', context).is(':not(:checked)')) {
-          vals.unshift(Drupal.t('Not shippable'));
-        }
-        return vals.join(', ');
-      });
-    }
-  };
-
-})(jQuery);
diff --git a/uc_product/src/Form/ProductClassAddForm.php b/uc_product/src/Form/ProductClassAddForm.php
new file mode 100644
index 0000000..d8a91fb
--- /dev/null
+++ b/uc_product/src/Form/ProductClassAddForm.php
@@ -0,0 +1,88 @@
+<?php
+
+namespace Drupal\uc_product\Form;
+
+use Drupal\Core\Form\FormBase;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\node\Entity\NodeType;
+use Drupal\uc_product\Controller\ProductController;
+
+/**
+ * Defines the form for adding a product feature to the features tab.
+ */
+class ProductClassAddForm extends FormBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+    return 'uc_product_class_add_form';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    $form = [];
+
+    $form['add'] = [
+      '#type' => 'container',
+    ];
+    $form['add']['name'] = [
+      '#title' => $this->t('Name'),
+      '#type' => 'textfield',
+      '#description' => $this->t('The human-readable name of this content type. This text will be displayed as part of the list on the <em>Add content</em> page. This name must be unique.'),
+      '#required' => TRUE,
+      '#size' => 30,
+    ];
+
+    $form['add']['type'] = [
+      '#type' => 'machine_name',
+      '#maxlength' => EntityTypeInterface::BUNDLE_MAX_LENGTH,
+      '#machine_name' => [
+        'exists' => ['Drupal\node\Entity\NodeType', 'load'],
+        'source' => ['add', 'name'],
+      ],
+      '#description' => $this->t('A unique machine-readable name for this content type. It must only contain lowercase letters, numbers, and underscores. This name will be used for constructing the URL of the %node-add page, in which underscores will be converted into hyphens.', [
+        '%node-add' => $this->t('Add content'),
+      ]),
+    ];
+
+    $form['add']['description'] = [
+      '#title' => $this->t('Description'),
+      '#type' => 'textarea',
+      '#description' => $this->t('This text will be displayed on the <em>Add new content</em> page.'),
+      '#required' => TRUE,
+    ];
+
+    $form['add']['actions'] = ['#type' => 'actions'];
+    $form['add']['actions']['submit'] = [
+      '#type' => 'submit',
+      '#value' => $this->t('Add'),
+    ];
+
+    $controller = ProductController::create(\Drupal::getContainer());
+    $form['overview'] = $controller->classOverview();
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    $values = $form_state->getValues();
+    // Don't need the overview form element to create the node type.
+    $params = ['type' => $values['type']];
+    $product_class = new NodeType($params, 'node_type');
+    $product_class->set('entityTypeId', 'node_type');
+    $product_class->set('name', $values['name']);
+    $product_class->set('description', $values['description'] . $this->t('<br /><em>This type is an Ubercart Product</em>'));
+    $product_class->setThirdPartySetting('uc_product', 'product', TRUE);
+    $product_class->original = new NodeType($params, 'node_type');
+    $product_class->save();
+    $form_state->setRedirect('uc_product.classes');
+  }
+
+}
diff --git a/uc_product/uc_product.libraries.yml b/uc_product/uc_product.libraries.yml
index b910979..40da1ba 100644
--- a/uc_product/uc_product.libraries.yml
+++ b/uc_product/uc_product.libraries.yml
@@ -3,9 +3,10 @@ uc_product.styles:
     theme:
       css/uc_product.css: {}
 
-uc_product.scripts:
+uc_product.content_types:
   js:
-    js/uc_product.js: {}
+    js/content_types.js: {}
   dependencies:
     - core/jquery
     - core/drupal
+    - core/drupal.form
diff --git a/uc_product/uc_product.links.action.yml b/uc_product/uc_product.links.action.yml
new file mode 100644
index 0000000..bd3658e
--- /dev/null
+++ b/uc_product/uc_product.links.action.yml
@@ -0,0 +1,5 @@
+uc_product.classes_add:
+  route_name: uc_product.classes.add
+  title: 'Add new product class'
+  appears_on:
+    - uc_product.classes
diff --git a/uc_product/uc_product.module b/uc_product/uc_product.module
index 0f4ad53..097943c 100644
--- a/uc_product/uc_product.module
+++ b/uc_product/uc_product.module
@@ -348,7 +348,7 @@ function uc_product_form_node_type_form_alter(&$form, FormStateInterface $form_s
     '#tree' => TRUE,
     '#attached' => [
       'library' => [
-        'uc_product/uc_product.scripts',
+        'uc_product/uc_product.content_types',
       ],
     ],
   ];
@@ -402,6 +402,7 @@ function uc_product_form_node_type_form_builder($entity_type, NodeTypeInterface
   $type->setThirdPartySetting('uc_product', 'product', (bool) $form_state->getValue(['uc_product', 'product']));
   $type->setThirdPartySetting('uc_product', 'shippable', (bool) $form_state->getValue(['uc_product', 'shippable']));
   $type->setThirdPartySetting('uc_product', 'image_field', $form_state->getValue(['uc_product', 'image_field']));
+  $type->set('description', $type->getDescription() . t('<br /><em>This type is an Ubercart Product</em>'));
 }
 
 /**
diff --git a/uc_product/uc_product.routing.yml b/uc_product/uc_product.routing.yml
index 5797c47..d90f42f 100644
--- a/uc_product/uc_product.routing.yml
+++ b/uc_product/uc_product.routing.yml
@@ -14,6 +14,14 @@ uc_product.classes:
   requirements:
     _permission: 'administer product classes'
 
+uc_product.classes.add:
+  path: '/admin/store/products/classes/add'
+  defaults:
+    _form: '\Drupal\uc_product\Form\ProductClassAddForm'
+    _title: 'Add product class'
+  requirements:
+    _permission: 'administer product classes'
+
 uc_product.settings:
   path: '/admin/store/config/products'
   defaults:
